api:
  port: 6053

substitutions:
  name: screeny
  id: screeny

# From https://community.home-assistant.io/t/esphome-experience-with-m5stack-products/422813
esphome:
  name: $name
  platformio_options:
      board_build.flash_mode: dio
  on_boot:
    - priority: 600
      then:
        - logger.log: "Boot - LED red"
        - light.turn_off: "${id}_led"
        - delay: 500ms
        - light.turn_on:
            id: "${id}_led"
            brightness: 100%
            transition_length: 0.1s
            red: 100%
            green: 0%
            blue: 0%
    - priority: 240
      then:
        - logger.log: "Boot - LED yellow"
        - light.turn_on:
            id: "${id}_led"
            brightness: 100%
            transition_length: 0.1s
            red: 90%
            green: 74%
            blue: 10%
        - wait_until:
            api.connected:
        - logger.log: "Boot - LED green"
        - light.turn_on:
            id: "${id}_led"
            brightness: 100%
            transition_length: 0.1s
            red: 66%
            green: 100%
            blue: 0%
        - delay: 1s
        - light.turn_on:
            id: "${id}_led"
            brightness: 15%
            transition_length: 0.1s
            red: 66%
            green: 100%
            blue: 0%

logger:

esp32:
  board: esp32-c3-devkitm-1
  variant: esp32c3
  framework:
    type: arduino

external_components:
  - source: github://bekriebel/esphome@sh1107_fix
    components: [ ssd1306_base, ssd1306_i2c ]

font:
  - file: 'fonts/PragmataPro.ttf'
    id: font1
    size: 16

  - file: 'fonts/PragmataPro.ttf'
    id: font_small
    size: 12

i2c:
  scl: 18
  sda: 19

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: HIGH
  fast_connect: true

ota:
  safe_mode: true
  password: !secret ota_password

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ESP IP Address
      id: ip_address
    ssid:
      name: ESP Connected SSID
      id: wifi_ssid

sensor:
  - platform: homeassistant
    id: co2_ppm
    entity_id: sensor.office_co2
    on_value:
      then:
        - lambda: |-
            float co2 = std::min(float(1800), x);
            auto t = (co2-440)/(1800 - 440);
            auto interpolated = ESPHSVColor(uint8_t((1-t)*96), 255, 32);
            auto inter_rgb = interpolated.to_rgb();

            auto call = id(${id}_led).turn_on();
            call.set_rgb(inter_rgb.red / 255.0, inter_rgb.green / 255.0, inter_rgb.blue / 255.0);
            call.set_brightness(0.3);
            call.perform();

binary_sensor:
  - platform: status
    name: "Lightring Status"
    id: system_status
  - platform: gpio
    pin:
      number: GPIO3
      mode:
        input: true
        pullup: true
    id: btn
    on_press:
      - display.page.show_next: "${id}_screen"

light:
  - platform: neopixelbus
    type: GRB
    variant: SK6812
    pin: 2
    num_leds: 1
    id: "${id}_led"
    name: "Built-in LED"
    restore_mode: ALWAYS_ON
    method:
      type: esp32_rmt
      channel: 0

display:
  - platform: ssd1306_i2c
    model: 'SH1107_128x64'
    id: "${id}_screen"
    rotation: 90
    flip_x: false
    flip_y: false
    offset_y: 96
    offset_x: 32
    contrast: 20%
    external_vcc: true
    update_interval: 1.0s
    pages:
      - lambda: |-
          if (id(co2_ppm).has_state()) {
            it.printf(5, 20, id(font1), "%.0f ppm", id(co2_ppm).state);
          } else {
            it.print(5, 20, id(font1), "N/A");
          }
          it.print(64, 50, id(font_small), TextAlign::CENTER, "Page 1");
      - lambda: |-
          if (id(system_status).state) {
            it.print(5, 20, id(font1), "Online");
          } else {
            it.print(5, 20, id(font1), "Offline");
          }
          it.print(64, 50, id(font_small), TextAlign::CENTER, "Page 2");
